언제 img를 쓰고 background-img를 쓰지?
img: 백엔드가 컨트롤 할 수 있는 이미지
background-img: 변경되지 않을 이미지(백엔드가 컨트롤 하지 않는 이미지)

heading을 안보이게 하는법
class="blind"   or   "screen_out"




벤더프리픽스 (Vendor-Prefix)

1. 벤더프리픽스 (Vendor-Prefix)

벤더(브라우저 제조사)와 프리픽스(접두어)의 합성어. 
아직 비표준이거나 실험적인 CSS 속성을 특정 브라우저에서 실행할 수 있도록 CSS 속성 앞에 브라우저 제조사 만의 접두어(prefix)를 붙이는 문법을 의미한다.

-webkit-transition: all 4s ease;
-moz-transition: all 4s ease;
-ms-transition: all 4s ease;
-o-transition: all 4s ease;
transition: all 4s ease;

벤더프리픽스 종류
-webkit-	크롬, 안드로이드, 사파리, ios 기반 파이어폭스, 오페라 등 웹킷 기반 브라우저	-webkit-transition: all .5s;
-moz-	파이어폭스 브라우저	                                                            -moz-transition: all .5s;
-ms-	마이크로소프트 인터넷 익스플로러, 레거시 엣지	                                    -ms-transition: all .5s;
-o-	레거시 오페라 브라우저	                                                            -o-transition: all .5s;


2022년 현재 시점에서 벤더 프리픽스는 줄어들고 있다. 
하지만 여전히 새로운 CSS 기능들은 개발되고 있고, 아직까지 사용해야하는 벤더 프리픽스들도 존재한다.
크로스 브라우징을 위해 레거시 브라우저들을 지원해야하는 점도 잊지 말아야한다.
필요 하지만 사용하는 것은 귀찮고, 어떤 속성에서 사용해야 하는지도 항상 바뀌기 때문에 자동화할 필요가 있다.
 → Visual Studio Code Extention 으로 Autoprefixer 사용 가능







 CSS Selector

1. 전체 선택자 (Universal Selector)
전체 선택자를 통해서 모든 HTML 요소에 접근을 할 수 있다. 

* {
    margin: 0 auto;
}


2. 타입 선택자 (Type Selector)
타입 선택자는 태그 이름을 사용하여 나타낸다.
해당 태그의 이름에 해당하는 모든 태그에 속성을 적용한다.

        h1, h2 {
            color: green;
        }

/* 선택자 */
body {
	background-color: red;
			/* 속성 */  /* 값 */
}


3. 아이디 선택자 (ID Selector)
id 속성은 페이지에 있는 해당 요소를 유일하게 식별할 때 쓴다.
아이디는 문서내에서 유일해야 한다.
아이디는 하나의 태그에서 중복해서 사용할 수 없다. 

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>docu</title>
    <style>
        #one {
            color: red;
        }
    </style>
</head>
<body>
    <!-- 아이디는 문서내에서 유일해야 한다. -->
    <!-- 아이디는 하나의 태그에서 중복해서 사용할 수 없다. -->
    <a href="#one"></a>
    <h1 id="one">hello world</h1>
</body>
</html>


4. 클래스 선택자 (Class Selector)
class 속성은 또한 id 속성과 마찬가지로 해당 요소를 식별할 때 사용.
id 속성은 한 페이지에 하나만 존재해야 하는 반면 class 속성은 한 페이지에 여러 개가 존재할 수 있기 때문에 동일한 class 속성이 들어간 요소들을 동시에 식별할 수 있다.

    <!-- 클래스는 문서 내 여러개 할 수 있다. -->
    <!-- 클래스는 하나의 태그에 여러개를 적용시킬 수 있다. -->
    <h1 class="one two">hello world</h1>

    <!-- emmet 사용할 때, .과 #으로 div를 자동생성할 수 있다. -->
    .tit-txt#main-title
    <div class="tit-txt" id="main-title"></div>


    p>lorem
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Velit dolorem perspiciatis animi nesciunt doloribus iusto saepe, deserunt corrupti placeat labore minus tempore autem eveniet esse molestiae quaerat nobis repellendus neque.</p>



5. 선택자 목록 (Selector list)








대제목: 선택자 우선순위

1. 후자 우선의 원칙
동일한 선택자가 연속으로 사용되었을 경우 후자가 우선한다.

2. 구체성(Specificity)의 원칙  012.html
한 선택자가 다른 선택자보다 더 구체적으로 작성되었다면 구체적인 선택자가 우선.
    <style>
        * {
            color: red;
        }

        h1 {
            color: blue;
        }

        p.color-red {
            color: red;
            font-size: 20px;
        }

        p {
            color: green;
        }
    </style>


<body>
    <p class="color-red">
        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Praesentium, dolor repudiandae tempora consequatur
        maxime animi ad! Quibusdam beatae laudantium itaque eos, cupiditate vero reiciendis assumenda natus
        reprehenderit eveniet at enim?
    </p>
</body>



2.1 가중치 
어떤 선택자가 더 구체적인가?
id와 class가 동시에 있을 경우에는 id > class > 타입 순으로 style 적용이 된다.

    <head>
        <style>
            h1 {color: red}
            .yellowgreen {color: yellowgreen}
            #fourth {color: skyblue}
        </style>
        </head>
        <body>
            <h1>h1의 첫번째</h1>
            <h1 class='yellowgreen'>h1의 두번째</h1>
            <h1 class='yellowgreen'>h1의 세번째</h1>
            <h1 id='fourth' class='yellowgreen'>h1의 네번째</h1>
        </body>

2.2 우선 순위 계산

- inline-style : 요소의 안에 속성으로 선언되는 스타일입니다. 1000 점의 가중치
- id 선택자 : 100점
- class, 가상클래스, 속성 선택자 : 10점
- 타입, 가상요소 선택자 : 1점
- 전체선택자(Universal Selector) 는 무시.

  id가 100점이지만 class 선택자가 아무리 많다고 하더라도 id 선택자를 넘어가지 못한다.


3. 중요성의 원칙

후자 우선 원칙으로 인해 후자가 적용되지만 전자를 적용시키고 싶다면  !important 를 속성값 추가

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>docu</title>
    <style>
        /* important가 둘 다 적요되어 있을 때에는 순서에 영향을 받는다. */
        .one {
            color: red; !important
        }
        .two {
            color: blue;
        }
    </style>
</head>
<body>
    <!-- 태그 내 class에 가입되는 순서는 적용과는 무관하다. -->
    <div class="one two">hello world</div>
    <div class="two one">hello world</div>
    <!-- important는 inline css보다 우선한다. -->
    <div class="two" style="color: green;">hello world</div>
</body>
</html>




대제목: 7. CSS Box Model


box-sizing: border-box;
border 기준으로 width와 height를 잡는다.


1. 박스의 구성

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Document</title>
        <style>
            div:nth-child(1) {
                /* 12시, 3시, 6시, 9시 모두  */
                padding: 10px;
                width: 100px;
                height: 100px;
                border: 10px solid black;
                color: red;
            }
            div:nth-child(2) {
                /* 12시, 3시, 6시, 9시 각각 */
                padding: 10px 20px 10px 20px;
                width: 100px;
                height: 100px;
                border: 10px solid black;
                color: blue;
            }
            div:nth-child(3) {
                /* 12시, 3시와 6시 9시를 각각 */
                /* 상하, 좌우 */
                padding: 10px 20px;
                width: 100px;
                height: 100px;
                border: 10px solid black;
                color: green;
            }
            div:nth-child(4) {
                /* 12시, 3시와 6시, 9시를 각각 */
                /* 상, 좌우, 하 */
                padding: 10px 50px 20px;
                width: 100px;
                height: 100px;
                border: 10px solid black;
                color: green;
            }
            div:nth-child(5) {
                /* 12시, 3시와 6시, 9시를 각각 */
                /* 상, 좌우, 하 */
                padding-top: 10px;
                /* 
                아래와 같이 각각 줄 수 있습니다.
                padding-top: 10px;
                padding-right: 50px;
                padding-bottom: 20px;
                padding-left: 50px; 
                */
                width: 100px;
                height: 100px;
                border: 10px solid black;
                color: green;
            }
        </style>
    </head>
    <body>
        <div>hello</div>
        <div>hello</div>
        <div>hello</div>
        <div>hello</div>
        <div>hello</div>
    </body>
</html>


2. 박스의 유형
 - block: width, height, margin, padding 가능
 - inline:
 - inline-block : inline 처럼 한 줄에 여러 요소가 존재할수 있다. block 처럼 width, height, margin, padding 등 모든 값을 지정할 수 있다. inline 속성의 특징과 block 속성의 특징이 함께 존재하는 박스
 - flex : 내부 자식 요소들의 위치를 부모 컨테이너 요소안에서 X축 혹은 Y축의 단방향으로 설정하는 속성입니다.
 - grid : 내부 자식 요소들의 위치를 부모 컨테이너 요소안에서 X축과 Y축을 모두 이용해 배치하는 속성입니다

표준 CSS 박스 모델
3.1 width, height
너비, 높이

3.2 border
보더는 보더 박스 영역의 스타일


(1) border-width
- 길이 지정  -  속성 값을 px과 같은 단위로 직접 지정합니다.
- medium  -  키워드 입니다. 중간 굵기로 표시됩니다.
- thin         -  키워드 입니다. 얇은 실선으로 표시됩니다.
- thick        - 키워드 입니다. 굵은 선으로 표시됩니다.

(2) border-style
none : 선을 없앱니다.
solid : 직선입니다.
dotted : 점선입니다.
dashed : 파선으로 바느질선과 같은 모양입니다.
double : 평행한 이중선입니다.
groove : 테두리가 오목하게 안쪽으로 파인 선입니다.
ridge : 테두리가 볼록하게 나온 입체감이 있는 선입니다. groove의 반대입니다.
inset : 요소가 전체적으로 안으로 들어가 보이는 형태입니다.
outset : 요소가 튀어나온 것처럼 보입니다. inset의 반대입니다.

(3) border-color
border-color : red green blue yellow;   //12시 3시 6시 9시 적용됨.


(4) radius
테두리의 꼭짓점을 둥글게 만든다.



















